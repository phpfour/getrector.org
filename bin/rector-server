#!/usr/bin/env php
<?php

declare(strict_types=1);

use Rector\Caching\Detector\ChangedFilesDetector;
use Rector\Core\Bootstrap\ConfigShifter;
use Rector\Core\Bootstrap\RectorConfigsResolver;
use Rector\Core\Configuration\Configuration;
use Rector\Core\Console\ConsoleApplication;
use Rector\Core\Console\Style\SymfonyStyleFactory;
use Rector\Core\DependencyInjection\RectorContainerFactory;
use Rector\Core\HttpKernel\RectorKernel;
use Symplify\SmartFileSystem\SmartFileInfo;
use Symplify\PackageBuilder\Console\ShellCode;
use Symplify\PackageBuilder\Reflection\PrivatesCaller;
use Symplify\SetConfigResolver\Bootstrap\InvalidSetReporter;
use Symplify\SetConfigResolver\Exception\SetNotFoundException;

// Performance boost
error_reporting(E_ALL);
ini_set('display_errors', 'stderr');
gc_disable();

require_once __DIR__ . '/../vendor/autoload.php';
require_once __DIR__ . '/../tmp/File.php';

$inputConfig = file_get_contents(__DIR__ . '/../tmp/config.php');
$inputFiles = ['File.php' => file_get_contents(__DIR__ . '/../tmp/File.php')];

$symfonyStyleFactory = new SymfonyStyleFactory(new PrivatesCaller());
$symfonyStyle = $symfonyStyleFactory->create();

try {
    $rectorConfigsResolver = new RectorConfigsResolver();
    $mainConfigFileInfo = new SmartFileInfo(__DIR__ . '/../tmp/config.php');
    $configFileInfos = $rectorConfigsResolver->resolveFromConfigFileInfo($mainConfigFileInfo);

    // Build DI container
    $rectorContainerFactory = new RectorContainerFactory();

    // shift configs as last so parameters with main config have higher priority
    $configShifter = new ConfigShifter();
    $configFileInfos = $configShifter->shiftInputConfigAsLast($configFileInfos, $mainConfigFileInfo);

    $container = $rectorContainerFactory->createFromConfigs($configFileInfos);

    /** @var Configuration $configuration */
    $configuration = $container->get(Configuration::class);

} catch (SetNotFoundException $setNotFoundException) {
    $invalidSetReporter = new InvalidSetReporter();
    $invalidSetReporter->report($setNotFoundException);
    exit(ShellCode::ERROR);
} catch (Throwable $throwable) {
    $symfonyStyle->error($throwable->getMessage());
    exit(ShellCode::ERROR);
}

disableProgressBar($configuration);

/** @var \Rector\Core\Application\RectorApplication $rector */
$rector = $container->get(\Rector\Core\Application\RectorApplication::class);

$rector->runOnFileInfos([
    new SmartFileInfo(__DIR__ . '/../tmp/File.php'),
]);

/** @var \Rector\ChangesReporting\Application\ErrorAndDiffCollector $errorAndDiffCollector */
$errorAndDiffCollector = $container->get(\Rector\ChangesReporting\Application\ErrorAndDiffCollector::class);

/** @var \Rector\ChangesReporting\Output\JsonOutputFormatter $outputFormatter */
$outputFormatter = $container->get(\Rector\ChangesReporting\Output\JsonOutputFormatter::class);

// Because report ECHO it, we need to capture
ob_start();
$outputFormatter->report($errorAndDiffCollector);
$result = ob_get_contents();
ob_clean();

exit(0);

function disableProgressBar(Configuration $configuration)
{
    $reflection = new \ReflectionClass($configuration);
    $property = $reflection->getProperty('showProgressBar');
    $property->setAccessible(true);
    $property->setValue($configuration, false);
}
